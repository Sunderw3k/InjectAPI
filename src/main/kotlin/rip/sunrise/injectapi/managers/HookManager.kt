package rip.sunrise.injectapi.managers

import com.google.common.collect.BiMap
import com.google.common.collect.HashBiMap
import com.google.common.collect.ImmutableBiMap
import rip.sunrise.injectapi.injection.InjectHook
import kotlin.NoSuchElementException

object HookManager {
    /**
     * Starts at 0 and is incremented by every call to [addHook].
     */
    private var hookId = 0
    private val hookMap = HashBiMap.create<Int, InjectHook>()

    /**
     * Returns an immutable [hookMap].
     */
    fun getHookMap(): ImmutableBiMap<Int, InjectHook> {
        return ImmutableBiMap.copyOf(hookMap)
    }

    /**
     * Adds a [hook] into [hookMap].
     */
    fun addHook(hook: InjectHook) {
        hookMap[hookId++] = hook
    }

    /**
     * Used in generated bytecode. Gets a hook from the [id].
     */
    fun getHook(id: Int): InjectHook {
        return hookMap[id] ?: throw NoSuchElementException("Hook with id '$id' couldn't be found")
    }

    /**
     * Returns a hook id from a [hook]
     *
     * @throws NoSuchElementException when the hook is not added to the [hookMap].
     */
    fun getHookId(hook: InjectHook): Int {
        return hookMap.inverse()[hook] ?: throw NoSuchElementException("Hook '$hook' has no ID assigned")
    }

    /**
     * Returns a set containing all classes targeted by currently added hooks.
     */
    fun getTargetClasses(): Set<Class<*>> {
        return hookMap.values.map { it.clazz }.toSet()
    }
}